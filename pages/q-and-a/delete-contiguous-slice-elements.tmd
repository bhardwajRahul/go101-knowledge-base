
### How to efficiently delete contiguous elements of a slice while keeping the element order?

Assume:
*. the involved slice is `s` and its type is `[]E`, where `E` is the slice element type.
*. we want to delete the elements in the subslice `s[from:to]` and `from <= to`.

###=== Way 1: use the build-in `copy` function

''' Go
	s = s[:from + copy(s[from:], s[to:])]
'''

###=== Way 2: use the build-in `append` function

''' Go
	s = append(s[from:], s[to:]...)
'''

###=== Way 3: use the `slices.Delete` function (Since Go 1.21)

''' Go
import "slices"

	s = slices.Delete(s, from, to)
'''

###=== Some notes

###+++ Note 1

There is a detail we should be aware of:
*  when `from < to`, the former two ways are as performant as each other.
*  when `from == to`, __the first way is almost a no-op,
   but the second way is not__.

    === ... is not `` https://github.com/golang/go/issues/57759

So the first way is preferred over the second way.

Note that, in Go 1.21, the implementation of the `slices.Delete` function
was the same as the way 2. So it was also inefficient when `from == to`.
Since Go 1.22, __the problem has been removed__.

::%% (The detail is collected in the __Go Optimizations 101__ book.)

    === Go Optimizations 101 :: https://go101.org/optimizations/101.html
    === ... removed `` https://github.com/golang/go/pull/63411/files

###+++ Note 2

If it is important to try to shorten the lifespan of other values
referenced by the freed-up elements (which contain pointers),
then we need do more (for both way 1 and way 2)
by clearing the freed-up elements with either of the following two manners:

Manner 1 (since Go 1.21):

''' Go
	// The "clear" built-in function was introduced in Go 1.21.
	clear(s[len(s):len(s)+to-from])
'''

Manner 2 (assume the zero literal of `E` is `zeroE`):

''' Go
	{
		temp := s[len(s):len(s)+to-from]
		for i := range temp {
			temp[i] = zeroE
		}
	}
'''

If Go toolchain 1.21 is used, then we should also clear the freed-up elements
by ourselves after calling the `slices.Delete` function (with either of the above two manners).
Since Go 1.22, the `slices.Delete` function will automatically clear the freed-up elements.






