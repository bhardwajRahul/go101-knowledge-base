### Concurrency Synchronization Overview

This article will explain what are synchronizations
and list the synchronization techniques supported by Go.

###+++++++++++ What Are Concurrency Synchronizations?


Concurrency synchronizations means how to control concurrent computations (a.k.a., goroutines in Go)
*
   to avoid data races between them,
*
   to avoid them consuming CPU resources when they have nothing to do.

{ //
Often, at run time, in a concurrent program,
a value will be used by multiple goroutines.
For such circumstances, we must control which goroutines
can acquire the ownership of the value at a given time.
Otherwise, data races may happen and the integrity of the value will not get guaranteed.

We use all kinds of data synchronization techniques to transfer or guard
value ownership between goroutines to avoid data races in current programs.

Here, more specifically, about the ownership of a value,
*
   the write ownership of a value is exclusive.
   In the period of a goroutine owns the write right of a value,
   no other goroutines should use the value, either read or write.
*
   the read ownership of a value is non-exclusive.
   In the period of a goroutine owns the read right of a value,
   other goroutines can also safely read the value,
   but no goroutines should write the value.

is called concurrency synchronization.

%%
(In fact, more precisely, to avoid data races,
what we care about is the ownership of some memory segments.
At run time, a value may occupy multiple memory segments.
We might not care about the ownership of all the memory segments
occupied by a value in writing a piece of concurrent code.
But, for explanation simplicity, we will still use
the "ownership of values" wording in descriptions throughout Go 101 articles.)

}


###+++++++++++ What Synchronization Techniques Does Go Support?

The article __channels in Go__
has shown that we can use channels to do synchronizations.
Besides using channels, Go also supports several other common synchronization techniques,
such as mutex and atomic operations.
Please read the following articles to get how to do synchronizations
with all kinds of techniques in Go:
*  __Channel Use Cases__
*  __How to Gracefully Close Channels__
*  __Concurrency Synchronization Techniques Provided in the `sync` Standard Package__
*  __Atomic Operations Provided in the `sync/atomic` Standard Package__

We can also do synchronizations by making use of network and file IO.
But such techniques are very inefficient within a single program process.
Generally, they are used for inter-process and distributed synchronizations.
Go 101 will not cover such techniques.

To understand these synchronization techniques better,
it is recommended to know the __memory order guarantees in Go__.

The data synchronization techniques in Go will not prevent programmers from writing
__improper concurrent code__.
However these techniques can help programmers write correct concurrent code easily.
And the unique channel related features make concurrent programming flexible and enjoyable.

    === channels in Go :: channel.html
    === Channel Use Cases :: channel-use-cases.html
    === How to Gracefully Close Channels :: channel-closing.html
    === Concurrency Synchronization Techniques ... :: concurrent-synchronization-more.html
    === Atomic Operations ... :: concurrent-atomic-operation.html
    === memory order ... :: memory-model.html
    === improper concurrent code :: concurrent-common-mistakes.html

