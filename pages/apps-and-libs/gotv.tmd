
################################## GoTV

**%% GoTV %%** is a tool used to manage and use multiple coexisting installations
of official Go toolchain versions harmoniously and conveniently.
The name is an abbreviation of **Go** **T**oolchain **V**ersion.

Project page: __https://github.com/go101/gotv__

Please follow __@zigo_101__ to get the latest news of GoTV
(and all kinds of Go details/facts/tips/...).

    === @zigo_101 `` https://twitter.com/zigo_101

###================================ Installation

Run

'''
go install go101.org/gotv@latest
'''

to install **%% GoTV %%**.

A 1.17+ toolchain version is needed to finish the installation.
The toolchain version may be uninstalled after pinning a suitable toolchain version (see below).

###============================== Usage

Run `gotv` without any arguments to show help messages.

Most `gotv` commands are in the following format:

'''
gotv ToolchainVersion [go-arguments...]
'''

During running the first such a command, the Go git repository will be cloned (which needs several minutes to finish).

`ToolchainVersion` might be

*  a Go release version, such as `1.17.13`, `1.18`, `1.19rc1`,
   which mean the release tags `go1.17.13`, `go1.18`, `go1.19rc1`, respectively,
   in the Go git repository.
   Note:
   -  `1.N.` means the latest release of `1.N` (since Go toolchain 1.21, `1.N` also means the latest release of `1.N`).
   -  `1.` means the latest Go 1 release version.
   -  `.` means the latest Go release version.
*  `:1.N`, which means the local latest `release-branch.go1.N` branch in the Go git repository.
*  `:tip`, which means the local latest `master` branch in the Go git repository.
*  a version suffixed with `!` means to fetch remote versions (by running `gotv fetch-versions`) firstly.

Examples:

'''
$ gotv 1.17. version
[Run]: $HOME/.cache/gotv/tag_go1.17.13/bin/go version
go version go1.17.13 linux/amd64

$ gotv 1.18.3 version
[Run]: $HOME/.cache/gotv/tag_go1.18.3/bin/go version
go version go1.18.3 linux/amd64

$ cat search.go
package main

import "fmt"

func demoFilter(n int) bool {
	return n & 1 == 0;
}

// Search values and return them without perverting order.
func search(start, end int)(r []int) {
	var count = 0
	for i, index := start, 0; i <= end; i++ {
		if demoFilter(i) {
			count++
			defer func(value int) {
				r[index] = value
				index++
			}(i)
		}
	}

	r = make([]int, count) // only allocate once
	return
}

func main() {
	fmt.Println(search(0, 9))
}

$ gotv 1.21 run search.go
[Run]: $HOME/.cache/gotv/tag_go1.21.7/bin/go run search.go
[8 6 4 2 0]
$ gotv 1.22 run search.go
[Run]: $HOME/.cache/gotv/tag_go1.22.1/bin/go run search.go
[0 0 0 0 0]
'''

%% (The example code comes from __this blog article__.
More uses of GoTV are demonstrated __here__.)

    === this blog article `` https://go101.org/blog/2024-03-01-for-loop-semantic-changes-in-go-1.22.html
    === here `` https://go101.org/blog/2022-08-22-some-undocumented-changes-in-go-1.18-and-1.19.html

All `gotv` specific commands:

'''
# sync the local Go git repository with remote
gotv fetch-versions

# list all versions seen locally
gotv list-versions

# build and cache some toolchain versions
gotv cache-version ToolchainVersion [ToolchainVersion ...]

# uncache some toolchain versions to save disk space
gotv uncache-version ToolchainVersion [ToolchainVersion ...]

# pin a specified toolchain version at a stable path
gotv pin-version ToolchainVersion

# unpin the current pinned toolchain version
gotv unpin-version

# set the default toolchain version (since v0.2.1)
gotv default-version ToolchainVersion

# check the default toolchain version (since v0.2.1)
gotv default-version
'''

###=============================== Pin a toolchain version

We can use the `gotv pin-version` command to pin a specific toolchain version to a stable path.
After adding the stable path to the `PATH` environment veriable,
we can use the official `go` command directly.
And after doing these, the toolchain versions installed through ways other than GoTV
may be safely uninstalled.

It is recommended to pin a 1.17+ version for __bootstrap purpose__ now.
The following example shows how to pin Go toolchain version 1.17.13:

    === bootstrap purpose `` https://github.com/golang/go/issues/44505

'''
$ gotv pin-version 1.17.
[Run]: cp -r $HOME/.cache/gotv/tag_go1.17.13 $HOME/.cache/gotv/pinned-toolchain

Please put the following shown pinned toolchain path in
your PATH environment variable to use go commands directly:

	/home/username/.cache/gotv/pinned-toolchain/bin
'''

After the prompted path is added to the PATH environment variable,
open a new terminal window:

'''
$ go version
go version go1.17.13 linux/amd64
'''

The command `gotv pin-version .!` will upgrade the pinned toolchain to the latest release version
(which may be a beta or rc version).

###================================= Set a bootstrap toolchain version

To build a toolchain verision, another already built toolchain version is needed to be used in the building process.
The other toolchain version is called the bootstrap version.

Some facts:

*  Toolchain versions <= 1.12.17 are unable to be built with toochain versions >= 1.16;
*  Toolchain versions <= 1.5.4 are uanable to be built with toolchain versions >= 1.6;
*  __A 1.17.13+ toolchain version is required to build 1.20+ toolchain versions__;
*  __A 1.20.14+ toolchain version is required to build 1.22+ toolchain versions__.
*  __A 1.22.6+ toolchain version is required to build 1.24+ toolchain versions__.
*  __A 1.24.0+ toolchain version is required to build 1.26+ toolchain versions__.

    === ... 1.20+ toolchain versions `` https://github.com/golang/go/issues/44505
    === ... 1.22+ toolchain versions `` https://github.com/golang/go/issues/54265
    === ... 1.24+ toolchain versions `` https://github.com/golang/go/issues/64751
    === ... 1.26+ toolchain versions `` https://github.com/golang/go/issues/69315

Currently, GoTV uses the toolchain set in the `PATH` environment variable as the bootstrap version by default.
If `GOROOT_BOOTSTRAP` environment variable is set, then its value will be used.







