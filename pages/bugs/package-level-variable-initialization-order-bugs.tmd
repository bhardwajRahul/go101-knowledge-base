
### Some known package-level variable initialization order bugs in certain Go toolchain versions

###====== Case 1

Due to __a function inline bug__ (the function call `foo()` is inlined here),
with Go toolchain versions prior to v1.23, the following program prints
`1 0`, but it should print `1 1` by __the rules__ specified in Go specification.

=== ...bug `` https://github.com/golang/go/issues/66585
=== the rules `` https://go101.org/article/evaluation-orders.html

The bug has been fixed since Go toolchain v1.23.

''' Go
package main

var x = 0
var a = foo()
var b = x

func foo() int {
	x++
	return x
}

func main() {
	println(a, b)
}
'''

###====== Case 2

Due to __a compiler optimization bug__,
with Go toolchain versions prior to v1.22, the following program prints
`true`, but it should print `false` by __the rules__ specified in Go specification.

=== ...bug `` https://github.com/golang/go/issues/51913
=== the rules `` https://go101.org/article/evaluation-orders.html

The bug has been fixed since Go toolchain v1.22.

''' Go
package main

var _ = func() int {
	a = false
	return 0
}()

var a = true
var b = a

func main() {
	println(b)
}
'''

###====== Case 3

Due to __a compiler bug__,
with Go toolchain versions prior to v1.12, the following program prints
`5 4`, but it should print `4 5` by __the rules__ specified in Go specification.

=== ...bug `` https://github.com/golang/go/issues/22326
=== the rules `` https://go101.org/article/evaluation-orders.html

The bug has been fixed since Go toolchain v1.13.

''' Go
package main

var (
  a = c
  b = f()
  c = f()
  d = 3
)

func f() int {
  d++
  return d
}

func main() {
	println(b, c)
}
'''
