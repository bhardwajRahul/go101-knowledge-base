
### How to create slices?

Assume the type of a new created slice is `S`
and `s0` is the zero value literal of `S`.

###==== Way 1 (use composite literals)

''' Go
	var aSlice = S{} // both length and capacity are zero
	// or
	var aSlice = S{Len - 1: s0} // both length and capacity are Len (a constant)
'''

The capacity of the result slice is not always aligned to a memory class size.
%%(Memory class sizes are mentioned in __Go Optimizations 101__.)

    === Go Optimizations 101 `` https://go101.org/optimizations/0.3-memory-allocations.html

###==== Way 2 (use the built-in `make` function):

''' Go
	var aSlice = make(S, initialLength, capacity)
	// or
	var aSlice = make(S, initialLength) // capacity == initialLength
'''

The capacity of the result slice is not always aligned to a memory class size.


###==== Way 3 (use the built-in `append` + `make` functions):

''' Go
	var aSlice = append(S{}, make(S, initialLength)...)
	// or
	var aSlice = append(S(nil), make(S, initialLength)...)
	// or
	var aSlice = append(S{}, make(S, initialLength, capacity)...)
	// or
	var aSlice = append(S(nil), make(S, initialLength, capacity)...)
'''

With the official toolchain, the capacity of the result slice
is aligned to a memory class size.


