
### More Go Related Topics

Go 101 articles mainly focus on syntax and semantics in Go.
There are some other Go related topics which are not covered in Go 101.
The remaining of the current article will make simple introductions
to those topics and provide some web links for readers to dig more into them.

###+++++++++++ Profiling, Benchmarks and Unit/Fuzzing Tests

We can use `go test` command in Go Toolchain to run tests and benchmarks.
Test source file names must end with `_test.go`.
Go Toolchain also supports profiling Go programs.
Please read the following articles for more details.
*
   __Profiling Go programs`` https://github.com/golang/go/wiki/Performance__.
*
   __The testing standard package`` https://golang.org/pkg/testing/__.
*
   __Write testable examples`` https://blog.golang.org/examples__.
*
   __Using subtests and sub-benchmarks`` https://blog.golang.org/subtests__.
*
   __`go test` command options`` https://golang.org/cmd/go/#hdr-Test_packages__.
*
   __Go Fuzzing`` https://go.dev/doc/fuzz/__.

###+++++++++++ gccgo

__gccgo__ is another Go compiler maintained by the Go core team.
It is mainly used to verify the correctness of the standard Go compiler (gc).
We can use the `-compiler=gccgo` build option in several Go Toolchain
commands to use the gccgo compiler instead of the gc compiler.
For example, `go run -compiler=gccgo main.go`.
This option requires the gccgo program is installed.
Once the gccgo program is installed,
we can also __use the `gccgo` command directly to compile Go code__.

=== gccgo :: https://github.com/golang/gofrontend
=== use the `gccgo` ... :: https://golang.org/doc/install/gccgo#Using_gccgo

###+++++++++++ The `go/*` Standard Packages

The `go/*` standard packages provide functionalities of
parsing Go source files, which are very useful to write custom Go tools.
Please read __`go/types`: The Go Type Checker__
and __package documentation__ for how to use these packages.

=== `go/types`: The Go Type Checker :: https://github.com/golang/example/tree/master/gotypes
=== package documentation :: https://golang.org/pkg/go/

###+++++++++++ System Calls

We can make system calls by call the functions exported by the
`syscall` standard package.
Please beware that, different from other standard packages,
the functions in the `syscall` standard package are operating system dependent.

###+++++++++++ Go Assembly

Go functions can be implemented with Go assembly language.
Go assembly language is a cross-architectures (though not 100%) assembly language.
Go assembly language is often used to implement some functions
which are critical for Go program execution performances.

For more details, please follow the following links.
*
   __A quick guide to Go's assembler`` https://golang.org/doc/asm__
*
   __The Design of the Go assembler`` https://talks.golang.org/2016/asm.slide__

###+++++++++++ cgo

We can call C code from Go code, and vice versa, through the cgo mechanism.
Please follow the following links for details.
*
   __cgo official documentation`` https://golang.org/cmd/cgo/__
*
   __C? Go? Cgo!`` https://blog.golang.org/c-go-cgo__
*
   __cgo on Go wiki`` https://github.com/golang/go/wiki/cgo__

It is possible to use C++ libraries through cgo by wrapping C++ libraries as C functions.

Please note that using cgo in code may make it is hard to maintain
cross-platform compatibility of Go programs,
and the calls between Go and C code are some less efficient than Go-Go and C-C calls.

@@@ #cross-platform-compiling
###+++++++++++ Cross-Platform Compiling

The standard Go compiler supports cross-platform compiling.
By setting the `GOOS` and `GOARCH` environments
before running the `go build` command,
we can build a Windows executable on a Linux machine, and vice versa.
Please read the following articles for details.
*
   __Building windows go programs on linux`` https://github.com/golang/go/wiki/WindowsCrossCompiling__.
*
   __The current supported target operating systems and compilation architectures`` https://golang.org/doc/install/source#environment__.

In particular, since Go 1.11, Go Toolchain starts to support WebAssembly as a new kind of GOARCH.
Please read __this wiki article__ for details.

=== this wiki article :: https://github.com/golang/go/wiki/WebAssembly

###+++++++++++ Compiler Directives

The standard Go compiler supports several
__compiler directives__.
A directive appears as a comment line like `//go:DirectiveName args`.
For examples, we can use the __go:generate__ directive
to generate code and use the __go:embed__ directive
(introduced in Go 1.16) to embed some data files in code.

=== compiler directives :: https://golang.org/cmd/compile/#hdr-Compiler_Directives
=== go:generate :: https://blog.golang.org/generate
=== go:embed :: https://golang.org/pkg/embed/

###+++++++++++ Build Constraints (Tags)

We can use __build constraints__
to let compilers build source files selectively (a.k.a., ignore some source files).
A build constraint is also called a build tag.
A build constraint can appear as a comment line like `// +build constraints`
or appear as the suffix in the base name of a source file.
Please note: the new __`//go:build`directive__
__introduced in Go 1.17__ will retire the old `// +build` constraints lines eventually.

=== build constraints :: https://golang.org/pkg/go/build/
=== `//go:build`directive :: https://go.googlesource.com/proposal/+/master/design/draft-gobuild.md
=== introduced in Go 1.17 :: https://github.com/golang/go/issues/41184

###+++++++++++ More Build Modes

The `go build` command in Go Toolchain supports several build modes.
Please run `go help buildmode` to show the available build modes
or read the explanations for __-buildmode option__ instead.
Except the **default** build mode, the most used build mode may be the **plugin** build mode.
We can use the functions in __the `plugin` standard package__
to load and use the Go plugin files outputted by using the **plugin** build mode.

=== -buildmode option :: https://golang.org/cmd/go/#hdr-Build_modes
=== the `plugin` standard package :: https://golang.org/pkg/plugin/



